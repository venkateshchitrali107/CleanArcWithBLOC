// Mocks generated by Mockito 5.3.2 from annotations
// in clean_arc_bloc/test/presentation/bloc/bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:clean_arc_bloc/core/error/failure.dart' as _i7;
import 'package:clean_arc_bloc/core/network/network_info.dart' as _i10;
import 'package:clean_arc_bloc/core/usecases/usecases.dart' as _i9;
import 'package:clean_arc_bloc/data/model/rick_and_morty_model.dart' as _i8;
import 'package:clean_arc_bloc/data/reposistory/rick_and_morty_repo_impl.dart'
    as _i2;
import 'package:clean_arc_bloc/domain/usecases/get_rick_and_morty_list.dart'
    as _i5;
import 'package:connectivity_plus/connectivity_plus.dart' as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRickAndMortyRepositoryImpl_0 extends _i1.SmartFake
    implements _i2.RickAndMortyRepositoryImpl {
  _FakeRickAndMortyRepositoryImpl_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectivity_2 extends _i1.SmartFake implements _i4.Connectivity {
  _FakeConnectivity_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetRickAndMortyList].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRickAndMortyList extends _i1.Mock
    implements _i5.GetRickAndMortyList {
  MockGetRickAndMortyList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RickAndMortyRepositoryImpl get repo => (super.noSuchMethod(
        Invocation.getter(#repo),
        returnValue: _FakeRickAndMortyRepositoryImpl_0(
          this,
          Invocation.getter(#repo),
        ),
      ) as _i2.RickAndMortyRepositoryImpl);
  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i8.RickAndMortyModel>>> call(
          _i9.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<
                _i3.Either<_i7.Failure, List<_i8.RickAndMortyModel>>>.value(
            _FakeEither_1<_i7.Failure, List<_i8.RickAndMortyModel>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, List<_i8.RickAndMortyModel>>>);
}

/// A class which mocks [NetworkInfoImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfoImpl extends _i1.Mock implements _i10.NetworkInfoImpl {
  MockNetworkInfoImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Connectivity get connectivity => (super.noSuchMethod(
        Invocation.getter(#connectivity),
        returnValue: _FakeConnectivity_2(
          this,
          Invocation.getter(#connectivity),
        ),
      ) as _i4.Connectivity);
  @override
  set connectivity(_i4.Connectivity? _connectivity) => super.noSuchMethod(
        Invocation.setter(
          #connectivity,
          _connectivity,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Stream<_i4.ConnectivityResult> get onNewDataStream => (super.noSuchMethod(
        Invocation.getter(#onNewDataStream),
        returnValue: _i6.Stream<_i4.ConnectivityResult>.fromIterable([
          _i4.ConnectivityResult.none,
          _i4.ConnectivityResult.wifi,
        ]),
      ) as _i6.Stream<_i4.ConnectivityResult>);
  @override
  set updateConnection(_i4.ConnectivityResult? update) => super.noSuchMethod(
        Invocation.setter(
          #updateConnection,
          update,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.ConnectivityResult get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.ConnectivityResult.wifi,
      ) as _i4.ConnectivityResult);
  @override
  dynamic updateConnectionStatus(_i4.ConnectivityResult? result) =>
      super.noSuchMethod(Invocation.method(
        #updateConnectionStatus,
        [result],
      ));
}
