// Mocks generated by Mockito 5.3.2 from annotations
// in clean_arc_bloc/test/data/datasource/local_datasource/db_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:clean_arc_bloc/data/datasource/local_datasource/db.dart' as _i3;
import 'package:isar/isar.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIsar_0 extends _i1.SmartFake implements _i2.Isar {
  _FakeIsar_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MyDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockMyDatabase extends _i1.Mock implements _i3.MyDatabase {
  MockMyDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Isar get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeIsar_0(
          this,
          Invocation.getter(#db),
        ),
      ) as _i2.Isar);
  @override
  set db(_i2.Isar? _db) => super.noSuchMethod(
        Invocation.setter(
          #db,
          _db,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Isar openDB() => (super.noSuchMethod(
        Invocation.method(
          #openDB,
          [],
        ),
        returnValue: _FakeIsar_0(
          this,
          Invocation.method(
            #openDB,
            [],
          ),
        ),
      ) as _i2.Isar);
  @override
  dynamic saveData(_i3.RickAndMortyModelLocal? data) =>
      super.noSuchMethod(Invocation.method(
        #saveData,
        [data],
      ));
  @override
  List<_i3.RickAndMortyModelLocal> getAll(
    int? limit,
    int? offset,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [
            limit,
            offset,
          ],
        ),
        returnValue: <_i3.RickAndMortyModelLocal>[],
      ) as List<_i3.RickAndMortyModelLocal>);
  @override
  List<_i3.RickAndMortyModelLocal> getFilteredName(String? searchKey) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilteredName,
          [searchKey],
        ),
        returnValue: <_i3.RickAndMortyModelLocal>[],
      ) as List<_i3.RickAndMortyModelLocal>);
  @override
  List<_i3.RickAndMortyModelLocal> getFilteredStatus(String? searchKey) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilteredStatus,
          [searchKey],
        ),
        returnValue: <_i3.RickAndMortyModelLocal>[],
      ) as List<_i3.RickAndMortyModelLocal>);
  @override
  List<_i3.RickAndMortyModelLocal> getFilteredSpecies(String? searchKey) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilteredSpecies,
          [searchKey],
        ),
        returnValue: <_i3.RickAndMortyModelLocal>[],
      ) as List<_i3.RickAndMortyModelLocal>);
  @override
  void deleteAll() => super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
