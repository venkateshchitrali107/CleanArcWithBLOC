// Mocks generated by Mockito 5.3.2 from annotations
// in clean_arc_bloc/test/data/datasource/remote_datasource/remote_datasource_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:clean_arc_bloc/core/usecases/usecases.dart' as _i6;
import 'package:clean_arc_bloc/data/datasource/local_datasource/db.dart' as _i2;
import 'package:clean_arc_bloc/data/datasource/remote_datasource/remote_datasource.dart'
    as _i3;
import 'package:clean_arc_bloc/data/model/rick_and_morty_model.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMyDatabase_0 extends _i1.SmartFake implements _i2.MyDatabase {
  _FakeMyDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RemoteDatasourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDatasourceImpl extends _i1.Mock
    implements _i3.RemoteDatasourceImpl {
  MockRemoteDatasourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MyDatabase get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeMyDatabase_0(
          this,
          Invocation.getter(#db),
        ),
      ) as _i2.MyDatabase);
  @override
  _i4.Future<List<_i5.RickAndMortyModel>> getRickAndMortyList(
          _i6.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRickAndMortyList,
          [params],
        ),
        returnValue: _i4.Future<List<_i5.RickAndMortyModel>>.value(
            <_i5.RickAndMortyModel>[]),
      ) as _i4.Future<List<_i5.RickAndMortyModel>>);
}
