// Mocks generated by Mockito 5.3.2 from annotations
// in clean_arc_bloc/test/core/network_info_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:clean_arc_bloc/core/network/network_info.dart' as _i3;
import 'package:connectivity_plus/connectivity_plus.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConnectivity_0 extends _i1.SmartFake implements _i2.Connectivity {
  _FakeConnectivity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkInfoImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfoImpl extends _i1.Mock implements _i3.NetworkInfoImpl {
  MockNetworkInfoImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Connectivity get connectivity => (super.noSuchMethod(
        Invocation.getter(#connectivity),
        returnValue: _FakeConnectivity_0(
          this,
          Invocation.getter(#connectivity),
        ),
      ) as _i2.Connectivity);
  @override
  set connectivity(_i2.Connectivity? _connectivity) => super.noSuchMethod(
        Invocation.setter(
          #connectivity,
          _connectivity,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Stream<_i2.ConnectivityResult> get onNewDataStream => (super.noSuchMethod(
        Invocation.getter(#onNewDataStream),
        returnValue: _i4.Stream<_i2.ConnectivityResult>.empty(),
      ) as _i4.Stream<_i2.ConnectivityResult>);
  @override
  set updateConnection(_i2.ConnectivityResult? update) => super.noSuchMethod(
        Invocation.setter(
          #updateConnection,
          update,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.ConnectivityResult get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i2.ConnectivityResult.bluetooth,
      ) as _i2.ConnectivityResult);
  @override
  dynamic updateConnectionStatus(_i2.ConnectivityResult? result) =>
      super.noSuchMethod(Invocation.method(
        #updateConnectionStatus,
        [result],
      ));
}
